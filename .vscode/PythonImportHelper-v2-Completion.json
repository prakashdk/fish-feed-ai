[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "mongoengine",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mongoengine",
        "description": "mongoengine",
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis",
        "description": "redis",
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "asdict",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "asdict",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "asdict",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "WebSocket",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "WebSocketDisconnect",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "WebSocket",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "WebSocket",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "WebSocketDisconnect",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StreamingResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "FeedRequest",
        "importPath": "app.models.feed",
        "description": "app.models.feed",
        "isExtraImport": true,
        "detail": "app.models.feed",
        "documentation": {}
    },
    {
        "label": "ActualFeedRequest",
        "importPath": "app.models.feed",
        "description": "app.models.feed",
        "isExtraImport": true,
        "detail": "app.models.feed",
        "documentation": {}
    },
    {
        "label": "feed_service",
        "importPath": "app.services",
        "description": "app.services",
        "isExtraImport": true,
        "detail": "app.services",
        "documentation": {}
    },
    {
        "label": "redis_client",
        "importPath": "app.configs.redis_client",
        "description": "app.configs.redis_client",
        "isExtraImport": true,
        "detail": "app.configs.redis_client",
        "documentation": {}
    },
    {
        "label": "redis_client",
        "importPath": "app.configs.redis_client",
        "description": "app.configs.redis_client",
        "isExtraImport": true,
        "detail": "app.configs.redis_client",
        "documentation": {}
    },
    {
        "label": "redis_client",
        "importPath": "app.configs.redis_client",
        "description": "app.configs.redis_client",
        "isExtraImport": true,
        "detail": "app.configs.redis_client",
        "documentation": {}
    },
    {
        "label": "redis_client",
        "importPath": "app.configs.redis_client",
        "description": "app.configs.redis_client",
        "isExtraImport": true,
        "detail": "app.configs.redis_client",
        "documentation": {}
    },
    {
        "label": "WaterQualitySensor",
        "importPath": "app.sensors",
        "description": "app.sensors",
        "isExtraImport": true,
        "detail": "app.sensors",
        "documentation": {}
    },
    {
        "label": "WaterQualitySensor",
        "importPath": "app.sensors",
        "description": "app.sensors",
        "isExtraImport": true,
        "detail": "app.sensors",
        "documentation": {}
    },
    {
        "label": "socket_manager",
        "importPath": "app.utils.socket_connection_manager",
        "description": "app.utils.socket_connection_manager",
        "isExtraImport": true,
        "detail": "app.utils.socket_connection_manager",
        "documentation": {}
    },
    {
        "label": "socket_manager",
        "importPath": "app.utils.socket_connection_manager",
        "description": "app.utils.socket_connection_manager",
        "isExtraImport": true,
        "detail": "app.utils.socket_connection_manager",
        "documentation": {}
    },
    {
        "label": "SensorData",
        "importPath": "app.models.sensor",
        "description": "app.models.sensor",
        "isExtraImport": true,
        "detail": "app.models.sensor",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "FeedSessionDto",
        "importPath": "app.dto.feed_session_dto",
        "description": "app.dto.feed_session_dto",
        "isExtraImport": true,
        "detail": "app.dto.feed_session_dto",
        "documentation": {}
    },
    {
        "label": "FeedSessionDto",
        "importPath": "app.dto.feed_session_dto",
        "description": "app.dto.feed_session_dto",
        "isExtraImport": true,
        "detail": "app.dto.feed_session_dto",
        "documentation": {}
    },
    {
        "label": "FeedSessionDto",
        "importPath": "app.dto.feed_session_dto",
        "description": "app.dto.feed_session_dto",
        "isExtraImport": true,
        "detail": "app.dto.feed_session_dto",
        "documentation": {}
    },
    {
        "label": "mongo_connect",
        "importPath": "app.configs.mongo_engine_connection",
        "description": "app.configs.mongo_engine_connection",
        "isExtraImport": true,
        "detail": "app.configs.mongo_engine_connection",
        "documentation": {}
    },
    {
        "label": "mongo_disconnect",
        "importPath": "app.configs.mongo_engine_connection",
        "description": "app.configs.mongo_engine_connection",
        "isExtraImport": true,
        "detail": "app.configs.mongo_engine_connection",
        "documentation": {}
    },
    {
        "label": "mongo_connect",
        "importPath": "app.configs.mongo_engine_connection",
        "description": "app.configs.mongo_engine_connection",
        "isExtraImport": true,
        "detail": "app.configs.mongo_engine_connection",
        "documentation": {}
    },
    {
        "label": "mongo_disconnect",
        "importPath": "app.configs.mongo_engine_connection",
        "description": "app.configs.mongo_engine_connection",
        "isExtraImport": true,
        "detail": "app.configs.mongo_engine_connection",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "FISH_AVG_WEIGHT_G",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "FISH_COUNT",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "FEATURE_RANGES",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "FEATURE_WEIGHTS",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "MODEL_PATH",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "FACTOR_RANGES",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "FEATURE_RANGES",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "MODEL_PATH",
        "importPath": "app.constants",
        "description": "app.constants",
        "isExtraImport": true,
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "FishFeedCalculator",
        "importPath": "app.feed_calculator",
        "description": "app.feed_calculator",
        "isExtraImport": true,
        "detail": "app.feed_calculator",
        "documentation": {}
    },
    {
        "label": "FeedAdjustmentModel",
        "importPath": "app.feed_adjustment_model",
        "description": "app.feed_adjustment_model",
        "isExtraImport": true,
        "detail": "app.feed_adjustment_model",
        "documentation": {}
    },
    {
        "label": "FeedManager",
        "importPath": "app.feed_manager",
        "description": "app.feed_manager",
        "isExtraImport": true,
        "detail": "app.feed_manager",
        "documentation": {}
    },
    {
        "label": "FeatureManager",
        "importPath": "app.feature_manager",
        "description": "app.feature_manager",
        "isExtraImport": true,
        "detail": "app.feature_manager",
        "documentation": {}
    },
    {
        "label": "get_float",
        "importPath": "app.utils.redis_utils",
        "description": "app.utils.redis_utils",
        "isExtraImport": true,
        "detail": "app.utils.redis_utils",
        "documentation": {}
    },
    {
        "label": "get_json",
        "importPath": "app.utils.redis_utils",
        "description": "app.utils.redis_utils",
        "isExtraImport": true,
        "detail": "app.utils.redis_utils",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "FeedSessionRepo",
        "importPath": "app.schema.feed_session",
        "description": "app.schema.feed_session",
        "isExtraImport": true,
        "detail": "app.schema.feed_session",
        "documentation": {}
    },
    {
        "label": "FeedSessionRepo",
        "importPath": "app.schema.feed_session",
        "description": "app.schema.feed_session",
        "isExtraImport": true,
        "detail": "app.schema.feed_session",
        "documentation": {}
    },
    {
        "label": "FeedSessionRepo",
        "importPath": "app.schema.feed_session",
        "description": "app.schema.feed_session",
        "isExtraImport": true,
        "detail": "app.schema.feed_session",
        "documentation": {}
    },
    {
        "label": "MinMaxScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "MinMaxScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "MinMaxScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "FeedInputFeaturesDto",
        "importPath": "app.dto.feed_input_feature_dto",
        "description": "app.dto.feed_input_feature_dto",
        "isExtraImport": true,
        "detail": "app.dto.feed_input_feature_dto",
        "documentation": {}
    },
    {
        "label": "RawFeedFactorsDto",
        "importPath": "app.dto.raw_feed_factors_dto",
        "description": "app.dto.raw_feed_factors_dto",
        "isExtraImport": true,
        "detail": "app.dto.raw_feed_factors_dto",
        "documentation": {}
    },
    {
        "label": "RawFeedFactorsDto",
        "importPath": "app.dto.raw_feed_factors_dto",
        "description": "app.dto.raw_feed_factors_dto",
        "isExtraImport": true,
        "detail": "app.dto.raw_feed_factors_dto",
        "documentation": {}
    },
    {
        "label": "app.utils.scaling_utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "app.utils.scaling_utils",
        "description": "app.utils.scaling_utils",
        "detail": "app.utils.scaling_utils",
        "documentation": {}
    },
    {
        "label": "scale_features",
        "importPath": "app.utils.scaling_utils",
        "description": "app.utils.scaling_utils",
        "isExtraImport": true,
        "detail": "app.utils.scaling_utils",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "joblib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "joblib",
        "description": "joblib",
        "detail": "joblib",
        "documentation": {}
    },
    {
        "label": "SGDRegressor",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi.routing",
        "description": "fastapi.routing",
        "isExtraImport": true,
        "detail": "fastapi.routing",
        "documentation": {}
    },
    {
        "label": "feed_router",
        "importPath": "app.routes.feed_routes",
        "description": "app.routes.feed_routes",
        "isExtraImport": true,
        "detail": "app.routes.feed_routes",
        "documentation": {}
    },
    {
        "label": "sensor_router",
        "importPath": "app.routes.sensor_routes",
        "description": "app.routes.sensor_routes",
        "isExtraImport": true,
        "detail": "app.routes.sensor_routes",
        "documentation": {}
    },
    {
        "label": "ws_router",
        "importPath": "app.routes.websocket_routes",
        "description": "app.routes.websocket_routes",
        "isExtraImport": true,
        "detail": "app.routes.websocket_routes",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "mongo_connect",
        "kind": 2,
        "importPath": "app.configs.mongo_engine_connection",
        "description": "app.configs.mongo_engine_connection",
        "peekOfCode": "def mongo_connect():\n    \"\"\"Establishes a MongoDB connection using environment variables, with optional authentication.\"\"\"\n    load_dotenv()\n    mongodb_uri = os.getenv(\"MONGODB_URI\")\n    database_name = os.getenv(\"DATABASE\", \"fish_feed\")\n    username = os.getenv(\"MONGO_USER\")\n    password = os.getenv(\"MONGO_PASS\")\n    auth_source = os.getenv(\"MONGO_AUTH_DB\", \"admin\")\n    if not mongodb_uri or not database_name:\n        raise ValueError(",
        "detail": "app.configs.mongo_engine_connection",
        "documentation": {}
    },
    {
        "label": "mongo_disconnect",
        "kind": 2,
        "importPath": "app.configs.mongo_engine_connection",
        "description": "app.configs.mongo_engine_connection",
        "peekOfCode": "def mongo_disconnect():\n    \"\"\"Disconnects from MongoDB.\"\"\"\n    me.disconnect()",
        "detail": "app.configs.mongo_engine_connection",
        "documentation": {}
    },
    {
        "label": "RedisClient",
        "kind": 6,
        "importPath": "app.configs.redis_client",
        "description": "app.configs.redis_client",
        "peekOfCode": "class RedisClient:\n    def __init__(self):\n        self.redis = redis.Redis(\n            host=os.getenv(\"REDIS_HOST\", \"localhost\"),\n            port=int(os.getenv(\"REDIS_PORT\", 6379)),\n            db=int(os.getenv(\"REDIS_DB\", 0)),\n            password=os.getenv(\"REDIS_PASSWORD\", None),\n            decode_responses=True,\n        )\n        self.prefix = \"sensor:\"",
        "detail": "app.configs.redis_client",
        "documentation": {}
    },
    {
        "label": "redis_client",
        "kind": 5,
        "importPath": "app.configs.redis_client",
        "description": "app.configs.redis_client",
        "peekOfCode": "redis_client = RedisClient()",
        "detail": "app.configs.redis_client",
        "documentation": {}
    },
    {
        "label": "FeedInputFeaturesDto",
        "kind": 6,
        "importPath": "app.dto.feed_input_feature_dto",
        "description": "app.dto.feed_input_feature_dto",
        "peekOfCode": "class FeedInputFeaturesDto:\n    water_temperature_c: float\n    dissolved_oxygen_mg_l: float\n    time_since_last_feed_hr: float\n    water_pollution_level: float\n    raining: float",
        "detail": "app.dto.feed_input_feature_dto",
        "documentation": {}
    },
    {
        "label": "FeedSessionDto",
        "kind": 6,
        "importPath": "app.dto.feed_session_dto",
        "description": "app.dto.feed_session_dto",
        "peekOfCode": "class FeedSessionDto:\n    features: FeedInputFeaturesDto\n    other_factors: RawFeedFactorsDto\n    baseline_feed: float\n    adjustment_factor: float\n    final_feed: float\n    feeded_at: datetime\n    actual_feed: Optional[float] = None\n    leftover_feed: Optional[float] = None\n    actual_adjustment_factor: Optional[float] = None",
        "detail": "app.dto.feed_session_dto",
        "documentation": {}
    },
    {
        "label": "RawFeedFactorsDto",
        "kind": 6,
        "importPath": "app.dto.raw_feed_factors_dto",
        "description": "app.dto.raw_feed_factors_dto",
        "peekOfCode": "class RawFeedFactorsDto:\n    ph: float\n    turbidity: float\n    tds: float\n    # Add more fields as needed\n    def to_dict(self) -> Dict[str, float]:\n        \"\"\"Convert the DTO to a dictionary for MongoDB storage.\"\"\"\n        return self.__dict__",
        "detail": "app.dto.raw_feed_factors_dto",
        "documentation": {}
    },
    {
        "label": "FeedRequest",
        "kind": 6,
        "importPath": "app.models.feed",
        "description": "app.models.feed",
        "peekOfCode": "class FeedRequest(BaseModel):\n    left_over: float\nclass ActualFeedRequest(BaseModel):\n    actual_feed: float",
        "detail": "app.models.feed",
        "documentation": {}
    },
    {
        "label": "ActualFeedRequest",
        "kind": 6,
        "importPath": "app.models.feed",
        "description": "app.models.feed",
        "peekOfCode": "class ActualFeedRequest(BaseModel):\n    actual_feed: float",
        "detail": "app.models.feed",
        "documentation": {}
    },
    {
        "label": "SensorData",
        "kind": 6,
        "importPath": "app.models.sensor",
        "description": "app.models.sensor",
        "peekOfCode": "class SensorData(BaseModel):\n    ph: Optional[float]\n    temperature: Optional[float]\n    rain: Optional[float]\n    oxygen_level: Optional[float]\n    turbidity: Optional[float]\n    tds: Optional[float]\n    class Config:\n        # This makes it easier to accept the input as JSON and validate it\n        orm_mode = True",
        "detail": "app.models.sensor",
        "documentation": {}
    },
    {
        "label": "feed_router",
        "kind": 5,
        "importPath": "app.routes.feed_routes",
        "description": "app.routes.feed_routes",
        "peekOfCode": "feed_router = APIRouter()\n@feed_router.get(\"/feed\")\nasync def get_feed():\n    try:\n        return feed_service.get_feed()\n    except Exception as e:\n        return {\"error\": str(e)}, 500\n@feed_router.post(\"/feed\")\nasync def feed(payload: FeedRequest):\n    \"\"\"Process and feed the request data.\"\"\"",
        "detail": "app.routes.feed_routes",
        "documentation": {}
    },
    {
        "label": "sensor_router",
        "kind": 5,
        "importPath": "app.routes.sensor_routes",
        "description": "app.routes.sensor_routes",
        "peekOfCode": "sensor_router = APIRouter()\nsensor = WaterQualitySensor()\n@sensor_router.post(\"/update\")\nasync def update_sensor_data(data: SensorData):\n    \"\"\"Update sensor data and broadcast the new values.\"\"\"\n    try:\n        if data.ph is not None:\n            sensor.set_ph(data.ph)\n        if data.turbidity is not None:\n            sensor.set_turbidity(data.turbidity)",
        "detail": "app.routes.sensor_routes",
        "documentation": {}
    },
    {
        "label": "sensor",
        "kind": 5,
        "importPath": "app.routes.sensor_routes",
        "description": "app.routes.sensor_routes",
        "peekOfCode": "sensor = WaterQualitySensor()\n@sensor_router.post(\"/update\")\nasync def update_sensor_data(data: SensorData):\n    \"\"\"Update sensor data and broadcast the new values.\"\"\"\n    try:\n        if data.ph is not None:\n            sensor.set_ph(data.ph)\n        if data.turbidity is not None:\n            sensor.set_turbidity(data.turbidity)\n        if data.oxygen_level is not None:",
        "detail": "app.routes.sensor_routes",
        "documentation": {}
    },
    {
        "label": "ws_router",
        "kind": 5,
        "importPath": "app.routes.websocket_routes",
        "description": "app.routes.websocket_routes",
        "peekOfCode": "ws_router = APIRouter()\n@ws_router.websocket(\"/ws/sensor\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await socket_manager.connect(websocket)\n    try:\n        while True:\n            # Keep connection alive, no need to read messages\n            await asyncio.sleep(1)\n    except WebSocketDisconnect:\n        socket_manager.disconnect(websocket)",
        "detail": "app.routes.websocket_routes",
        "documentation": {}
    },
    {
        "label": "FeedSession",
        "kind": 6,
        "importPath": "app.schema.feed_session",
        "description": "app.schema.feed_session",
        "peekOfCode": "class FeedSession(me.Document):\n    features = me.DictField(required=True)\n    other_factors = me.DictField(required=True)\n    baseline_feed = me.FloatField(required=True)\n    adjustment_factor = me.FloatField(required=True)\n    final_feed = me.FloatField(required=True)\n    # Optional feedback (used for training)\n    actual_feed = me.FloatField(null=True)\n    leftover_feed = me.FloatField(null=True)\n    actual_adjustment_factor = me.FloatField(null=True)",
        "detail": "app.schema.feed_session",
        "documentation": {}
    },
    {
        "label": "FeedSessionRepo",
        "kind": 6,
        "importPath": "app.schema.feed_session",
        "description": "app.schema.feed_session",
        "peekOfCode": "class FeedSessionRepo:\n    def __init__(self):\n        self.logger = logging.getLogger(__name__)\n    def __connect(self, callback):\n        return_value = None\n        try:\n            mongo_connect()\n            return_value = callback()\n        except Exception as e:\n            self.logger.error(f\"Error occurred while executing query: {e}\")",
        "detail": "app.schema.feed_session",
        "documentation": {}
    },
    {
        "label": "FeedData",
        "kind": 6,
        "importPath": "app.services.feed_service",
        "description": "app.services.feed_service",
        "peekOfCode": "class FeedData:\n    calculated_feed: float\n    predicted_feed: float\n    predict_message: str\nmodel = FeedAdjustmentModel(model_path=MODEL_PATH)\nmanager = FeedManager(\n    fish_avg_weight_g=FISH_AVG_WEIGHT_G, fish_count=FISH_COUNT, model=model\n)\nscaler = FishFeedCalculator(\n    feature_ranges=FEATURE_RANGES, feature_weights=FEATURE_WEIGHTS",
        "detail": "app.services.feed_service",
        "documentation": {}
    },
    {
        "label": "get_feed",
        "kind": 2,
        "importPath": "app.services.feed_service",
        "description": "app.services.feed_service",
        "peekOfCode": "def get_feed() -> dict:\n    feature_manager = FeatureManager(FACTOR_RANGES)\n    features, raw_factors = feature_manager.get_feed_input_features()\n    scaled = scaler.scale_features(asdict(features)).reshape(1, -1)\n    baseline_feed, final_feed, adjustment = manager.run(scaled)\n    adjust_message = _get_feed_change_message(baseline_feed, final_feed)\n    # Persist process data\n    redis_client.set(\n        \"process:data\",\n        {",
        "detail": "app.services.feed_service",
        "documentation": {}
    },
    {
        "label": "feed",
        "kind": 2,
        "importPath": "app.services.feed_service",
        "description": "app.services.feed_service",
        "peekOfCode": "def feed(left_over: float) -> dict:\n    actual_feed = get_float(\"process:actual_feed\")\n    dumped_data = get_json(\"process:data\")\n    actual_adjustment_factor = left_over / actual_feed\n    scaled = np.array(redis_client.get(\"process:scaled\"))\n    # Retrain model\n    manager.retrain(scaled, actual_adjustment_factor)\n    manager.update_raw_features(\n        FeedSessionDto(\n            features=dumped_data[\"features\"],",
        "detail": "app.services.feed_service",
        "documentation": {}
    },
    {
        "label": "export_feed_session",
        "kind": 2,
        "importPath": "app.services.feed_service",
        "description": "app.services.feed_service",
        "peekOfCode": "def export_feed_session(include_all: bool = True):\n    \"\"\"Export all FeedSession documents to a CSV file.\"\"\"\n    feed_sessions = FeedSessionRepo().retrieve_all()\n    # Prepare a list of dictionaries for CSV export\n    feed_sessions_data = []\n    for session in feed_sessions:\n        data: Dict[str, float | datetime | None] = {\n            \"water_temperature_c\": session.features[\"water_temperature_c\"],\n            \"dissolved_oxygen_mg_l\": session.features[\"dissolved_oxygen_mg_l\"],\n            \"time_since_last_feed_hr\": session.features[\"time_since_last_feed_hr\"],",
        "detail": "app.services.feed_service",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "app.services.feed_service",
        "description": "app.services.feed_service",
        "peekOfCode": "model = FeedAdjustmentModel(model_path=MODEL_PATH)\nmanager = FeedManager(\n    fish_avg_weight_g=FISH_AVG_WEIGHT_G, fish_count=FISH_COUNT, model=model\n)\nscaler = FishFeedCalculator(\n    feature_ranges=FEATURE_RANGES, feature_weights=FEATURE_WEIGHTS\n)\ndef get_feed() -> dict:\n    feature_manager = FeatureManager(FACTOR_RANGES)\n    features, raw_factors = feature_manager.get_feed_input_features()",
        "detail": "app.services.feed_service",
        "documentation": {}
    },
    {
        "label": "manager",
        "kind": 5,
        "importPath": "app.services.feed_service",
        "description": "app.services.feed_service",
        "peekOfCode": "manager = FeedManager(\n    fish_avg_weight_g=FISH_AVG_WEIGHT_G, fish_count=FISH_COUNT, model=model\n)\nscaler = FishFeedCalculator(\n    feature_ranges=FEATURE_RANGES, feature_weights=FEATURE_WEIGHTS\n)\ndef get_feed() -> dict:\n    feature_manager = FeatureManager(FACTOR_RANGES)\n    features, raw_factors = feature_manager.get_feed_input_features()\n    scaled = scaler.scale_features(asdict(features)).reshape(1, -1)",
        "detail": "app.services.feed_service",
        "documentation": {}
    },
    {
        "label": "scaler",
        "kind": 5,
        "importPath": "app.services.feed_service",
        "description": "app.services.feed_service",
        "peekOfCode": "scaler = FishFeedCalculator(\n    feature_ranges=FEATURE_RANGES, feature_weights=FEATURE_WEIGHTS\n)\ndef get_feed() -> dict:\n    feature_manager = FeatureManager(FACTOR_RANGES)\n    features, raw_factors = feature_manager.get_feed_input_features()\n    scaled = scaler.scale_features(asdict(features)).reshape(1, -1)\n    baseline_feed, final_feed, adjustment = manager.run(scaled)\n    adjust_message = _get_feed_change_message(baseline_feed, final_feed)\n    # Persist process data",
        "detail": "app.services.feed_service",
        "documentation": {}
    },
    {
        "label": "get_str",
        "kind": 2,
        "importPath": "app.utils.redis_utils",
        "description": "app.utils.redis_utils",
        "peekOfCode": "def get_str(key: str) -> Optional[str]:\n    value = redis_client.get(key)\n    return value.decode(\"utf-8\") if value else None\ndef get_float(key: str) -> float:\n    value = redis_client.get(key)\n    if value is None:\n        raise ValueError(f\"Missing key in Redis: {key}\")\n    return float(value)\ndef get_json(key: str) -> Dict[str, Any]:\n    value = redis_client.get(key)",
        "detail": "app.utils.redis_utils",
        "documentation": {}
    },
    {
        "label": "get_float",
        "kind": 2,
        "importPath": "app.utils.redis_utils",
        "description": "app.utils.redis_utils",
        "peekOfCode": "def get_float(key: str) -> float:\n    value = redis_client.get(key)\n    if value is None:\n        raise ValueError(f\"Missing key in Redis: {key}\")\n    return float(value)\ndef get_json(key: str) -> Dict[str, Any]:\n    value = redis_client.get(key)\n    if value is None:\n        raise ValueError(f\"Missing JSON key in Redis: {key}\")\n    return value",
        "detail": "app.utils.redis_utils",
        "documentation": {}
    },
    {
        "label": "get_json",
        "kind": 2,
        "importPath": "app.utils.redis_utils",
        "description": "app.utils.redis_utils",
        "peekOfCode": "def get_json(key: str) -> Dict[str, Any]:\n    value = redis_client.get(key)\n    if value is None:\n        raise ValueError(f\"Missing JSON key in Redis: {key}\")\n    return value\ndef set_json(key: str, value: dict) -> None:\n    redis_client.set(key, json.dumps(value))\ndef set_float(key: str, value: float) -> None:\n    redis_client.set(key, str(value))",
        "detail": "app.utils.redis_utils",
        "documentation": {}
    },
    {
        "label": "set_json",
        "kind": 2,
        "importPath": "app.utils.redis_utils",
        "description": "app.utils.redis_utils",
        "peekOfCode": "def set_json(key: str, value: dict) -> None:\n    redis_client.set(key, json.dumps(value))\ndef set_float(key: str, value: float) -> None:\n    redis_client.set(key, str(value))",
        "detail": "app.utils.redis_utils",
        "documentation": {}
    },
    {
        "label": "set_float",
        "kind": 2,
        "importPath": "app.utils.redis_utils",
        "description": "app.utils.redis_utils",
        "peekOfCode": "def set_float(key: str, value: float) -> None:\n    redis_client.set(key, str(value))",
        "detail": "app.utils.redis_utils",
        "documentation": {}
    },
    {
        "label": "scale_features",
        "kind": 2,
        "importPath": "app.utils.scaling_utils",
        "description": "app.utils.scaling_utils",
        "peekOfCode": "def scale_features(\n    features: dict, feature_ranges: dict, feature_weights: dict | None = None\n) -> np.ndarray:\n    \"\"\"\n    Scales features using MinMaxScaler based on provided min-max ranges,\n    and optionally applies weights to each scaled feature.\n    Args:\n        features (dict): Feature values {feature_name: value}.\n        feature_ranges (dict): Feature ranges {feature_name: (min, max)}.\n        feature_weights (dict, optional): Feature weights {feature_name: weight}.",
        "detail": "app.utils.scaling_utils",
        "documentation": {}
    },
    {
        "label": "ConnectionManager",
        "kind": 6,
        "importPath": "app.utils.socket_connection_manager",
        "description": "app.utils.socket_connection_manager",
        "peekOfCode": "class ConnectionManager:\n    def __init__(self):\n        self.active_connections: List[WebSocket] = []\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n    def disconnect(self, websocket: WebSocket):\n        if websocket in self.active_connections:\n            self.active_connections.remove(websocket)\n    async def broadcast(self, message: str):",
        "detail": "app.utils.socket_connection_manager",
        "documentation": {}
    },
    {
        "label": "socket_manager",
        "kind": 5,
        "importPath": "app.utils.socket_connection_manager",
        "description": "app.utils.socket_connection_manager",
        "peekOfCode": "socket_manager = ConnectionManager()",
        "detail": "app.utils.socket_connection_manager",
        "documentation": {}
    },
    {
        "label": "FISH_COUNT",
        "kind": 5,
        "importPath": "app.constants",
        "description": "app.constants",
        "peekOfCode": "FISH_COUNT = 100\nFISH_AVG_WEIGHT_G = 10\nFEATURE_RANGES = {\n    \"water_temperature_c\": (15, 30),\n    \"dissolved_oxygen_mg_l\": (2, 10),\n    \"time_since_last_feed_hr\": (1, 12),\n    \"water_pollution_level\": (0, 1),  # Derived feature\n    \"raining\": (0, 1),\n}\nFACTOR_RANGES = {",
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "FISH_AVG_WEIGHT_G",
        "kind": 5,
        "importPath": "app.constants",
        "description": "app.constants",
        "peekOfCode": "FISH_AVG_WEIGHT_G = 10\nFEATURE_RANGES = {\n    \"water_temperature_c\": (15, 30),\n    \"dissolved_oxygen_mg_l\": (2, 10),\n    \"time_since_last_feed_hr\": (1, 12),\n    \"water_pollution_level\": (0, 1),  # Derived feature\n    \"raining\": (0, 1),\n}\nFACTOR_RANGES = {\n    \"ph\": (5.0, 10.0),",
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "FEATURE_RANGES",
        "kind": 5,
        "importPath": "app.constants",
        "description": "app.constants",
        "peekOfCode": "FEATURE_RANGES = {\n    \"water_temperature_c\": (15, 30),\n    \"dissolved_oxygen_mg_l\": (2, 10),\n    \"time_since_last_feed_hr\": (1, 12),\n    \"water_pollution_level\": (0, 1),  # Derived feature\n    \"raining\": (0, 1),\n}\nFACTOR_RANGES = {\n    \"ph\": (5.0, 10.0),\n    \"turbidity\": (5, 800),",
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "FACTOR_RANGES",
        "kind": 5,
        "importPath": "app.constants",
        "description": "app.constants",
        "peekOfCode": "FACTOR_RANGES = {\n    \"ph\": (5.0, 10.0),\n    \"turbidity\": (5, 800),\n    \"tds\": (100, 3000),\n}\nFEATURE_WEIGHTS = {\n    \"water_temperature_c\": 0.25,\n    \"dissolved_oxygen_mg_l\": 0.22,\n    \"time_since_last_feed_hr\": 0.13,\n    \"water_pollution_level\": 0.20,",
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "FEATURE_WEIGHTS",
        "kind": 5,
        "importPath": "app.constants",
        "description": "app.constants",
        "peekOfCode": "FEATURE_WEIGHTS = {\n    \"water_temperature_c\": 0.25,\n    \"dissolved_oxygen_mg_l\": 0.22,\n    \"time_since_last_feed_hr\": 0.13,\n    \"water_pollution_level\": 0.20,\n    \"raining\": 0.10,\n}\nFACTOR_WEIGHTS = {\n    \"ph\": 0.25,\n    \"turbidity\": 0.25,",
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "FACTOR_WEIGHTS",
        "kind": 5,
        "importPath": "app.constants",
        "description": "app.constants",
        "peekOfCode": "FACTOR_WEIGHTS = {\n    \"ph\": 0.25,\n    \"turbidity\": 0.25,\n    \"tds\": 0.5,\n}\nMODEL_PATH = \"models/fish_feed_model.pkl\"",
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "MODEL_PATH",
        "kind": 5,
        "importPath": "app.constants",
        "description": "app.constants",
        "peekOfCode": "MODEL_PATH = \"models/fish_feed_model.pkl\"",
        "detail": "app.constants",
        "documentation": {}
    },
    {
        "label": "PollutionFactors",
        "kind": 6,
        "importPath": "app.feature_manager",
        "description": "app.feature_manager",
        "peekOfCode": "class PollutionFactors:\n    ph: float\n    turbidity: float\n    tds: float\nclass FeatureManager:\n    def __init__(\n        self,\n        factor_ranges: dict[str, tuple[float, float]],\n        factor_weights: dict[str, float] | None = None,\n    ):",
        "detail": "app.feature_manager",
        "documentation": {}
    },
    {
        "label": "FeatureManager",
        "kind": 6,
        "importPath": "app.feature_manager",
        "description": "app.feature_manager",
        "peekOfCode": "class FeatureManager:\n    def __init__(\n        self,\n        factor_ranges: dict[str, tuple[float, float]],\n        factor_weights: dict[str, float] | None = None,\n    ):\n        self.factor_ranges = factor_ranges\n        self.factor_weights = factor_weights\n        self.__compute_since_last_feed()\n        self.water_sensor = WaterQualitySensor()",
        "detail": "app.feature_manager",
        "documentation": {}
    },
    {
        "label": "FeedAdjustmentModel",
        "kind": 6,
        "importPath": "app.feed_adjustment_model",
        "description": "app.feed_adjustment_model",
        "peekOfCode": "class FeedAdjustmentModel:\n    def __init__(self, model_path, learning_rate=\"constant\", eta0=0.01):\n        \"\"\"\n        Initializes the FeedAdjustmentModel with the model path and training parameters.\n        Args:\n            model_path (str): Path where the model is stored.\n            learning_rate (str): Learning rate for the SGDRegressor.\n            eta0 (float): Initial learning rate for the SGDRegressor.\n        \"\"\"\n        self.model_path = model_path",
        "detail": "app.feed_adjustment_model",
        "documentation": {}
    },
    {
        "label": "FishFeedCalculator",
        "kind": 6,
        "importPath": "app.feed_calculator",
        "description": "app.feed_calculator",
        "peekOfCode": "class FishFeedCalculator:\n    def __init__(self, feature_ranges, feature_weights):\n        \"\"\"\n        Initializes the FishFeedCalculator with feature ranges and weights.\n        Args:\n            feature_ranges (dict): Dictionary containing feature names as keys and their respective min-max ranges.\n            feature_weights (dict): Dictionary containing feature names as keys and their respective weights.\n        \"\"\"\n        self.feature_ranges = feature_ranges\n        self.feature_weights = feature_weights",
        "detail": "app.feed_calculator",
        "documentation": {}
    },
    {
        "label": "FeedManager",
        "kind": 6,
        "importPath": "app.feed_manager",
        "description": "app.feed_manager",
        "peekOfCode": "class FeedManager:\n    def __init__(self, fish_avg_weight_g: float, fish_count: int, model):\n        \"\"\"\n        Manages feed calculation, prediction, and training workflow.\n        Args:\n            fish_avg_weight_g (float): Average fish weight in grams.\n            fish_count (int): Number of fish in the tank/pond.\n            model (object): Object with `predict(scaled_features)` and `train(scaled_features, target)`.\n            input_function (callable): Input function for user feedback (default: built-in input).\n            logger (callable): Logging/output function (default: built-in print).",
        "detail": "app.feed_manager",
        "documentation": {}
    },
    {
        "label": "WaterQualitySensor",
        "kind": 6,
        "importPath": "app.sensors",
        "description": "app.sensors",
        "peekOfCode": "class WaterQualitySensor:\n    def __init__(self):\n        self.redis = redis_client\n        self.rain_window = 60\n    # pH\n    def set_ph(self, value: float):\n        return self.redis.set_sensor_data(\"ph\", value)\n    def get_ph(self) -> float:\n        value = self.redis.get_sensor_data(\"ph\")\n        if not value:",
        "detail": "app.sensors",
        "documentation": {}
    },
    {
        "label": "generate_mock_leftover_feed",
        "kind": 2,
        "importPath": "data.mock_feed",
        "description": "data.mock_feed",
        "peekOfCode": "def generate_mock_leftover_feed():\n    return float(input(\"Enter leftover (kg): \"))\ndef main():\n    print(\"[INFO] Starting feed interaction loop...\")\n    try:\n        f = \"y\"\n        while f.lower() == \"y\":\n            # Step 1: Get feed prediction\n            response = requests.get(FEED_API_URL)\n            if not response.ok:",
        "detail": "data.mock_feed",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "data.mock_feed",
        "description": "data.mock_feed",
        "peekOfCode": "def main():\n    print(\"[INFO] Starting feed interaction loop...\")\n    try:\n        f = \"y\"\n        while f.lower() == \"y\":\n            # Step 1: Get feed prediction\n            response = requests.get(FEED_API_URL)\n            if not response.ok:\n                print(f\"[ERROR] Failed to get feed data: {response.text}\")\n                time.sleep(3)",
        "detail": "data.mock_feed",
        "documentation": {}
    },
    {
        "label": "BASE_API_URL",
        "kind": 5,
        "importPath": "data.mock_feed",
        "description": "data.mock_feed",
        "peekOfCode": "BASE_API_URL = \"http://localhost:5000/api\"\nFEED_API_URL = f\"{BASE_API_URL}/feed\"\nACTUAL_FEED_URL = f\"{BASE_API_URL}/actual_feed\"\ndef generate_mock_leftover_feed():\n    return float(input(\"Enter leftover (kg): \"))\ndef main():\n    print(\"[INFO] Starting feed interaction loop...\")\n    try:\n        f = \"y\"\n        while f.lower() == \"y\":",
        "detail": "data.mock_feed",
        "documentation": {}
    },
    {
        "label": "FEED_API_URL",
        "kind": 5,
        "importPath": "data.mock_feed",
        "description": "data.mock_feed",
        "peekOfCode": "FEED_API_URL = f\"{BASE_API_URL}/feed\"\nACTUAL_FEED_URL = f\"{BASE_API_URL}/actual_feed\"\ndef generate_mock_leftover_feed():\n    return float(input(\"Enter leftover (kg): \"))\ndef main():\n    print(\"[INFO] Starting feed interaction loop...\")\n    try:\n        f = \"y\"\n        while f.lower() == \"y\":\n            # Step 1: Get feed prediction",
        "detail": "data.mock_feed",
        "documentation": {}
    },
    {
        "label": "ACTUAL_FEED_URL",
        "kind": 5,
        "importPath": "data.mock_feed",
        "description": "data.mock_feed",
        "peekOfCode": "ACTUAL_FEED_URL = f\"{BASE_API_URL}/actual_feed\"\ndef generate_mock_leftover_feed():\n    return float(input(\"Enter leftover (kg): \"))\ndef main():\n    print(\"[INFO] Starting feed interaction loop...\")\n    try:\n        f = \"y\"\n        while f.lower() == \"y\":\n            # Step 1: Get feed prediction\n            response = requests.get(FEED_API_URL)",
        "detail": "data.mock_feed",
        "documentation": {}
    },
    {
        "label": "generate_mock_sensor_data",
        "kind": 2,
        "importPath": "data.mock_sensor",
        "description": "data.mock_sensor",
        "peekOfCode": "def generate_mock_sensor_data():\n    return {\n        \"ph\": round(random.uniform(*FACTOR_RANGES[\"ph\"]), 2),\n        \"temperature\": round(random.uniform(*FEATURE_RANGES[\"water_temperature_c\"]), 2),\n        \"rain\": round(random.uniform(0, 1000)),\n        \"oxygen_level\": round(\n            random.uniform(*FEATURE_RANGES[\"dissolved_oxygen_mg_l\"]), 2\n        ),\n        \"turbidity\": round(random.uniform(*FACTOR_RANGES[\"turbidity\"]), 2),\n        \"tds\": round(random.uniform(*FACTOR_RANGES[\"tds\"]), 2),",
        "detail": "data.mock_sensor",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "data.mock_sensor",
        "description": "data.mock_sensor",
        "peekOfCode": "def main():\n    print(\"[INFO] Starting mock sensor API publisher...\")\n    try:\n        while True:\n            data = generate_mock_sensor_data()\n            response = requests.post(API_URL, json=data)\n            print(\n                f\"[POSTED] {data} --> Status: {response.status_code}, Response: {response.json()}\"\n            )\n            time.sleep(1)",
        "detail": "data.mock_sensor",
        "documentation": {}
    },
    {
        "label": "FEATURE_RANGES",
        "kind": 5,
        "importPath": "data.mock_sensor",
        "description": "data.mock_sensor",
        "peekOfCode": "FEATURE_RANGES = {\n    \"water_temperature_c\": (15, 30),\n    \"dissolved_oxygen_mg_l\": (2, 10),\n    \"time_since_last_feed_hr\": (1, 12),\n    \"water_pollution_level\": (0, 1),  # Derived feature\n    \"raining\": (0, 1),\n}\nFACTOR_RANGES = {\n    \"ph\": (5.0, 10.0),\n    \"turbidity\": (5, 800),",
        "detail": "data.mock_sensor",
        "documentation": {}
    },
    {
        "label": "FACTOR_RANGES",
        "kind": 5,
        "importPath": "data.mock_sensor",
        "description": "data.mock_sensor",
        "peekOfCode": "FACTOR_RANGES = {\n    \"ph\": (5.0, 10.0),\n    \"turbidity\": (5, 800),\n    \"tds\": (100, 3000),\n}\nAPI_URL = \"http://localhost:5000/api/sensor/update\"  # Update if running elsewhere\ndef generate_mock_sensor_data():\n    return {\n        \"ph\": round(random.uniform(*FACTOR_RANGES[\"ph\"]), 2),\n        \"temperature\": round(random.uniform(*FEATURE_RANGES[\"water_temperature_c\"]), 2),",
        "detail": "data.mock_sensor",
        "documentation": {}
    },
    {
        "label": "API_URL",
        "kind": 5,
        "importPath": "data.mock_sensor",
        "description": "data.mock_sensor",
        "peekOfCode": "API_URL = \"http://localhost:5000/api/sensor/update\"  # Update if running elsewhere\ndef generate_mock_sensor_data():\n    return {\n        \"ph\": round(random.uniform(*FACTOR_RANGES[\"ph\"]), 2),\n        \"temperature\": round(random.uniform(*FEATURE_RANGES[\"water_temperature_c\"]), 2),\n        \"rain\": round(random.uniform(0, 1000)),\n        \"oxygen_level\": round(\n            random.uniform(*FEATURE_RANGES[\"dissolved_oxygen_mg_l\"]), 2\n        ),\n        \"turbidity\": round(random.uniform(*FACTOR_RANGES[\"turbidity\"]), 2),",
        "detail": "data.mock_sensor",
        "documentation": {}
    },
    {
        "label": "ping",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def ping():\n    return {\"status\": \"ok\", \"message\": \"pong\"}\n# Register API routers\napp.include_router(sensor_router, prefix=\"/api/sensor\", tags=[\"sensor\"])\napp.include_router(feed_router, prefix=\"/api\", tags=[\"feed\"])\napp.include_router(ws_router)\nif __name__ == \"__main__\":\n    import uvicorn\n    port = int(os.getenv(\"APP_PORT\", 5000))\n    uvicorn.run(app, port=port)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n# Health check route\n@app.get(\"/ping\")\ndef ping():\n    return {\"status\": \"ok\", \"message\": \"pong\"}\n# Register API routers\napp.include_router(sensor_router, prefix=\"/api/sensor\", tags=[\"sensor\"])\napp.include_router(feed_router, prefix=\"/api\", tags=[\"feed\"])\napp.include_router(ws_router)\nif __name__ == \"__main__\":",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "features",
        "kind": 5,
        "importPath": "model_visualizer",
        "description": "model_visualizer",
        "peekOfCode": "features = FEATURE_RANGES.keys()\nmodel = joblib.load(MODEL_PATH)\nweights = model.coef_\n# Extract and print model coefficients\nprint(\"\\n📊 Model Coefficients (Weights for each feature):\")\nfor name, coef in zip(features, model.coef_):\n    print(f\"{name:30}: {coef:.4f}\")\n# Print model intercept (bias)\nprint(f\"\\n⚙️ Model Intercept (Bias): {model.intercept_[0]:.4f}\")\nplt.figure(figsize=(8, 4))",
        "detail": "model_visualizer",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "model_visualizer",
        "description": "model_visualizer",
        "peekOfCode": "model = joblib.load(MODEL_PATH)\nweights = model.coef_\n# Extract and print model coefficients\nprint(\"\\n📊 Model Coefficients (Weights for each feature):\")\nfor name, coef in zip(features, model.coef_):\n    print(f\"{name:30}: {coef:.4f}\")\n# Print model intercept (bias)\nprint(f\"\\n⚙️ Model Intercept (Bias): {model.intercept_[0]:.4f}\")\nplt.figure(figsize=(8, 4))\nplt.barh(features, weights)",
        "detail": "model_visualizer",
        "documentation": {}
    },
    {
        "label": "weights",
        "kind": 5,
        "importPath": "model_visualizer",
        "description": "model_visualizer",
        "peekOfCode": "weights = model.coef_\n# Extract and print model coefficients\nprint(\"\\n📊 Model Coefficients (Weights for each feature):\")\nfor name, coef in zip(features, model.coef_):\n    print(f\"{name:30}: {coef:.4f}\")\n# Print model intercept (bias)\nprint(f\"\\n⚙️ Model Intercept (Bias): {model.intercept_[0]:.4f}\")\nplt.figure(figsize=(8, 4))\nplt.barh(features, weights)\nplt.xlabel(\"Weight (Coefficient)\")",
        "detail": "model_visualizer",
        "documentation": {}
    }
]